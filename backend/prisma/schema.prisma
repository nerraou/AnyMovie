// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement()) @map("id")
  username  String   @unique @db.VarChar(255)
  password  String   @map("password") @db.VarChar(72)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp()

  movies Movie[]

  @@map("users")
}

model Movie {
  id           Int      @id @default(autoincrement()) @map("id")
  userId       Int      @map("user_id")
  movieId      Int      @map("movie_id")
  releaseDate  String   @map("release_date") @db.VarChar(10)
  title        String   @map("title") @db.VarChar(1000)
  posterPath   String?  @map("poster_path") @db.VarChar(1000)
  backdropPath String?  @map("backdrop_path") @db.VarChar(1000)
  isFavorite   Boolean  @default(false) @map("is_favorite")
  isWatched    Boolean  @default(false) @map("is_watched")
  isToWatch    Boolean  @default(false) @map("is_to_watch")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp()
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamp()

  user User @relation(fields: [userId], references: [id])

  @@map("movies")
}
